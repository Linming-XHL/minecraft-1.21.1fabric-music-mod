plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

// 系统安装的JavaFX 11路径
def javafxPath = System.getenv('JAVAFX_HOME') ?: '/usr/share/openjfx'

repositories {
    mavenCentral()
    
    // 添加Fabric Kotlin专用仓库（关键修复）
    maven {
        name = "Fabric Kotlin"
        url = "https://maven.fabricmc.net/net/fabricmc/fabric-language-kotlin/"
    }
    
    // 保留Fabric官方仓库
    maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
    }
    
    // 阿里云镜像（作为备用）
    maven {
        url = "https://maven.aliyun.com/repository/public"
    }
    maven {
        url = "https://maven.aliyun.com/repository/central"
    }
    
    // Minecraft官方仓库
    maven {
        name = "Mojang"
        url = "https://libraries.minecraft.net/"
    }
}

def os = System.getProperty('os.name').toLowerCase()
def javafxPlatform = 'linux'
if (os.contains('win')) {
    javafxPlatform = 'win'
} else if (os.contains('mac')) {
    javafxPlatform = 'mac'
}

dependencies {
    // Minecraft依赖
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    
    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
    
    // 网络请求库
    modImplementation "com.squareup.okhttp3:okhttp:4.12.0"
    include "com.squareup.okhttp3:okhttp:4.12.0"
    
    // JSON解析库
    modImplementation "com.google.code.gson:gson:2.10.1"
    include "com.google.code.gson:gson:2.10.1"
    
    // JavaFX依赖
    implementation "org.openjfx:javafx-base:11.0.2:${javafxPlatform}"
    implementation "org.openjfx:javafx-controls:11.0.2:${javafxPlatform}"
    implementation "org.openjfx:javafx-media:11.0.2:${javafxPlatform}"
    implementation "org.openjfx:javafx-graphics:11.0.2:${javafxPlatform}"
    implementation "org.openjfx:javafx-fxml:11.0.2:${javafxPlatform}"
    
    // 添加Kotlin语言支持（与当前Fabric版本兼容）
    modImplementation "net.fabricmc:fabric-language-kotlin:1.10.11+kotlin.1.9.22"
    include "net.fabricmc:fabric-language-kotlin:1.10.11+kotlin.1.9.22"
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 21
    
    it.options.compilerArgs = [
        '--module-path', "${javafxPath}/lib",
        '--add-modules', 'javafx.media,javafx.base,javafx.graphics,javafx.controls,javafx.fxml'
    ]
}

processResources {
    inputs.property "version", project.version
    inputs.property "mod_id", project.archives_base_name
    inputs.property "maven_group", project.maven_group
    inputs.property "archives_base_name", project.archives_base_name

    filesMatching("fabric.mod.json") {
        expand(
            version: project.version,
            mod_id: project.archives_base_name,
            maven_group: project.maven_group,
            archives_base_name: project.archives_base_name
        )
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    
    from {
        configurations.runtimeClasspath.collect { 
            it.isDirectory() ? it : zipTree(it).matching {
                // 排除冲突的加载器类，解决ClassCastException
                exclude 'net/fabricmc/loader/**'
                exclude 'net/fabricmc/api/**'
                exclude 'META-INF/services/net.fabricmc.loader.api.LanguageAdapter'
            }
        }
    }
    
    zip64 = true
    duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.EXCLUDE
    exclude 'module-info.class'
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
        }
    }
    repositories {
        maven {
            url = uri("file://${project.buildDir}/maven-repo")
        }
    }
}

loom {
    runs {
        client {
            client()
            configName "Client"
            vmArg("--module-path=${javafxPath}/lib")
            vmArg("--add-modules=javafx.media,javafx.base,javafx.graphics,javafx.controls,javafx.fxml")
        }
        server {
            server()
            configName "Server"
            vmArg("--module-path=${javafxPath}/lib")
            vmArg("--add-modules=javafx.media,javafx.base,javafx.graphics,javafx.controls,javafx.fxml")
        }
    }
}
